import logging
from telegram import *
from telegram.ext import *

logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s", 
    level=logging.INFO
)
logger = logging.getLogger(__name__)

START, Q1, Q2, Q3, Q4, Q5, END = range(7)

QUIZ = {
    "q1": {
        "text": "1. –ö—Ç–æ –∫—Ä–µ—Å—Ç–∏–ª –†—É—Å—å?\n1) –ü—ë—Ç—Ä –í–µ–ª–∏–∫–∏–π\n2) –ò–≤–∞–Ω –ì—Ä–æ–∑–Ω—ã–π\n3) –ö–Ω—è–∑—å –í–ª–∞–¥–∏–º–∏—Ä –°–≤—è—Ç–æ—Å–ª–∞–≤–æ–≤–∏—á",
        "correct": "3",
        "explanation": "‚úÖ –í–µ—Ä–Ω–æ!"
    },
    "q2": {
        "text": "2. –ö–∞–∫ –±—ã–ª –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω –æ–±—Ä–∞–∑ –ö–Ω—è–∑—è –í–ª–∞–¥–∏–º–∏—Ä–∞ –≤ —Å–æ–≤–µ—Ç—Å–∫–∏–π –ø–µ—Ä–∏–æ–¥?\n1) –°—Ç—Ä–æ–≥–æ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º\n2) –ù–µ–æ–¥–Ω–æ–∑–Ω–∞—á–Ω—ã–º, –ø—Ä–∏–∑–Ω–∞–≤–∞–ª–∞—Å—å –µ–≥–æ —Ä–æ–ª—å –≤ –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏–∏ –≥–æ—Å—É–¥–∞—Ä—Å—Ç–≤–∞\n3) –°—Ç—Ä–æ–≥–æ –Ω–µ–≥–∞—Ç–∏–≤–Ω—ã–º",
        "correct": "2",
        "explanation": "‚úÖ –í–µ—Ä–Ω–æ!"
    },
    "q3": {
        "text": "3. –í –∫–∞–∫–æ–º –≥–æ–¥—É –≤—ã—à–µ–ª –º—É–ª—å—Ç—Ñ–∏–ª—å–º '–ö–Ω—è–∑—å –í–ª–∞–¥–∏–º–∏—Ä'?\n1) 2004\n2) 2005\n3) 2006",
        "correct": "3",
        "explanation": "‚úÖ –í–µ—Ä–Ω–æ!"
    },
    "q4": {
        "text": "4. –ù–∞ –∫–∞–∫–æ–π –º–æ—Å–∫–æ–≤—Å–∫–æ–π –ø–ª–æ—â–∞–¥–∏ —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω –ø–∞–º—è—Ç–Ω–∏–∫ –í–ª–∞–¥–∏–º–∏—Ä—É –í–µ–ª–∏–∫–æ–º—É?\n1) –ë–æ—Ä–æ–≤–∏—Ü–∫–∞—è\n2) –ú–∞–Ω–µ–∂–Ω–∞—è\n3) –†–∏–∂—Å–∫–∞—è",
        "correct": "1",
        "explanation": "‚úÖ –í–µ—Ä–Ω–æ!"
    },
    "q5": {
        "text": "5. –ö—Ç–æ —Å—ã–≥—Ä–∞–ª –≥–ª–∞–≤–Ω—É—é —Ä–æ–ª—å –≤ –∫–∏–Ω–æ—Ñ–∏–ª—å–º–µ '–í–∏–∫–∏–Ω–≥' 2016 –≥–æ–¥–∞?\n1) –ê–ª–µ–∫—Å–∞–Ω–¥—Ä –ü–µ—Ç—Ä–æ–≤\n2) –î–∞–Ω–∏–ª–∞ –ö–æ–∑–ª–æ–≤—Å–∫–∏–π\n3) –ê–ª–µ–∫—Å–µ–π –°–µ—Ä–µ–±—Ä—è–∫–æ–≤",
        "correct": "2",
        "explanation": "‚úÖ –í–µ—Ä–Ω–æ!"
    }
}

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    user = update.message.from_user
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.first_name} –Ω–∞—á–∞–ª –∫–≤–∏–∑.")
    
    reply_keyboard = [["–ù–∞—á–∞—Ç—å –∫–≤–∏–∑"]]
    
    await update.message.reply_text(
        f"–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é! –≠—Ç–æ –∫–≤–∏–∑ –æ–± –æ–±—Ä–∞–∑–µ –∫–Ω—è–∑—è –í–ª–∞–¥–∏–º–∏—Ä–∞ –≤ —Ä—É—Å—Å–∫–æ–π –∫—É–ª—å—Ç—É—Ä–Ω–æ–π –ø–∞–º—è—Ç–∏.\n"
        "–í–∞—Å –∂–¥—ë—Ç 5 –≤–æ–ø—Ä–æ—Å–æ–≤ —Å –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏ –æ—Ç–≤–µ—Ç–æ–≤.\n\n"
        "–ù–∞–∂–º–∏—Ç–µ '–ù–∞—á–∞—Ç—å –∫–≤–∏–∑', –∫–æ–≥–¥–∞ –±—É–¥–µ—Ç–µ –≥–æ—Ç–æ–≤—ã!",
        reply_markup=ReplyKeyboardMarkup(
            reply_keyboard, one_time_keyboard=True, resize_keyboard=True
        ),
    )
    return START

async def question_1(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    context.user_data["score"] = 0
    await update.message.reply_text(
        QUIZ["q1"]["text"],
        reply_markup=ReplyKeyboardMarkup(
            [["1", "2", "3"]], one_time_keyboard=True, resize_keyboard=True
        ),
    )
    return Q1

async def question_2(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    user_answer = update.message.text
    
    if user_answer == QUIZ["q1"]["correct"]:
        context.user_data["score"] += 1
        await update.message.reply_text(QUIZ["q1"]["explanation"])
    else:
        await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω–æ. –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: 3) –ö–Ω—è–∑—å –í–ª–∞–¥–∏–º–∏—Ä –°–≤—è—Ç–æ—Å–ª–∞–≤–æ–≤–∏—á")
    
    await update.message.reply_text(
        QUIZ["q2"]["text"],
        reply_markup=ReplyKeyboardMarkup(
            [["1", "2", "3"]], one_time_keyboard=True, resize_keyboard=True
        ),
    )
    return Q2

async def question_3(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    user_answer = update.message.text
    
    if user_answer == QUIZ["q2"]["correct"]:
        context.user_data["score"] += 1
        await update.message.reply_text(QUIZ["q2"]["explanation"])
    else:
        await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω–æ. –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: 2) –ù–µ–æ–¥–Ω–æ–∑–Ω–∞—á–Ω—ã–º")
    
    await update.message.reply_text(
        QUIZ["q3"]["text"],
        reply_markup=ReplyKeyboardMarkup(
            [["1", "2", "3"]], one_time_keyboard=True, resize_keyboard=True
        ),
    )
    return Q3

async def question_4(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    user_answer = update.message.text
    
    if user_answer == QUIZ["q3"]["correct"]:
        context.user_data["score"] += 1
        await update.message.reply_text(QUIZ["q3"]["explanation"])
    else:
        await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω–æ. –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: 3) 2006")
    
    await update.message.reply_text(
        QUIZ["q4"]["text"],
        reply_markup=ReplyKeyboardMarkup(
            [["1", "2", "3"]], one_time_keyboard=True, resize_keyboard=True
        ),
    )
    return Q4

async def question_5(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    user_answer = update.message.text
    
    if user_answer == QUIZ["q4"]["correct"]:
        context.user_data["score"] += 1
        await update.message.reply_text(QUIZ["q4"]["explanation"])
    else:
        await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω–æ. –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: 1) –ë–æ—Ä–æ–≤–∏—Ü–∫–∞—è")
    
    await update.message.reply_text(
        QUIZ["q5"]["text"],
        reply_markup=ReplyKeyboardMarkup(
            [["1", "2", "3"]], one_time_keyboard=True, resize_keyboard=True
        ),
    )
    return Q5

async def end_quiz(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    user_answer = update.message.text
    
    if user_answer == QUIZ["q5"]["correct"]:
        context.user_data["score"] += 1
        await update.message.reply_text(QUIZ["q5"]["explanation"])
    else:
        await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω–æ. –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: 2) –î–∞–Ω–∏–ª–∞ –ö–æ–∑–ª–æ–≤—Å–∫–∏–π")
    
    score = context.user_data.get("score", 0)
    percentage = int(score / len(QUIZ) * 100)
    
    if percentage == 100:
        reaction = " "
    elif percentage >= 70:
        reaction = " "
    elif percentage >= 40:
        reaction = " "
    else:
        reaction = " "
    
    await update.message.reply_text(
        f"üìä <b>–¢–≤–æ–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç:</b> {score} –∏–∑ {len(QUIZ)} ({percentage}%)\n"
        f"{reaction}\n\n"
        "–ß—Ç–æ–±—ã –ø—Ä–æ–π—Ç–∏ –∫–≤–∏–∑ –µ—â—ë —Ä–∞–∑, –Ω–∞–∂–º–∏ /start",
        parse_mode="HTML",
        reply_markup=ReplyKeyboardRemove(),
    )
    return ConversationHandler.END

async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    user = update.message.from_user
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.first_name} –æ—Ç–º–µ–Ω–∏–ª –∫–≤–∏–∑.")
    await update.message.reply_text(
        "–ö–≤–∏–∑ –ø—Ä–µ—Ä–≤–∞–Ω. –ù–∞–∂–º–∏ /start, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ.",
        reply_markup=ReplyKeyboardRemove(),
    )
    return ConversationHandler.END

def main() -> None:
    application = Application.builder().token("7629024665:AAF1w5BC_fEcbX8A7QEFZPUIJ3WZvqduBI8").build()

    conv_handler = ConversationHandler(
        entry_points=[CommandHandler("start", start)],
        states={
            START: [MessageHandler(filters.Regex("^–ù–∞—á–∞—Ç—å –∫–≤–∏–∑$"), question_1)],
            Q1: [MessageHandler(filters.Regex("^[123]$"), question_2)],
            Q2: [MessageHandler(filters.Regex("^[123]$"), question_3)],
            Q3: [MessageHandler(filters.Regex("^[123]$"), question_4)],
            Q4: [MessageHandler(filters.Regex("^[123]$"), question_5)],
            Q5: [MessageHandler(filters.Regex("^[123]$"), end_quiz)],
        },
        fallbacks=[CommandHandler("cancel", cancel)],
    )

    application.add_handler(conv_handler)
    application.run_polling()

if __name__ == "__main__":
    main()
